package com.babuwyt.siji.ui.activity;

import android.content.Intent;
import android.content.res.Resources;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.TextView;

import com.babuwyt.jonylibrary.bean.BaseBean;
import com.babuwyt.jonylibrary.inteface.MyCallBack;
import com.babuwyt.jonylibrary.util.UHelper;
import com.babuwyt.jonylibrary.util.XUtil;
import com.babuwyt.jonylibrary.views.dialog.GetPriceDialog;
import com.babuwyt.jonylibrary.views.dialog.RechargeDialog;
import com.babuwyt.siji.R;
import com.babuwyt.siji.adapter.MyWalletAdapter;
import com.babuwyt.siji.base.BaseActivity;
import com.babuwyt.siji.base.SessionManager;
import com.babuwyt.siji.bean.BankCallBackBean;
import com.babuwyt.siji.bean.BankInfoBean;
import com.babuwyt.siji.entity.BankInfoEntity;
import com.babuwyt.siji.finals.BaseURL;
import com.bigkoo.pickerview.OptionsPickerView;

import org.xutils.view.annotation.ContentView;
import org.xutils.view.annotation.Event;
import org.xutils.view.annotation.ViewInject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by lenovo on 2017/9/22.
 */
@ContentView(R.layout.activity_mywallet)
public class MyWalletActivity extends BaseActivity {
    @ViewInject(R.id.recyclerview)
    RecyclerView recyclerview;
    @ViewInject(R.id.toolbar)
    Toolbar toolbar;
    @ViewInject(R.id.tv_type)
    TextView tv_type;
    @ViewInject(R.id.tv_time)
    TextView tv_time;

    private RecyclerView.LayoutManager manager;
    private ArrayList<String> mList;
    private MyWalletAdapter mAdapter;
    private RechargeDialog chongzhidialog;
    private GetPriceDialog getPriceDialog;
    private String SerialNo;
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setStatusBar(false);
        init();
    }

    private void init() {
        chongzhidialog = new RechargeDialog(this);
        getPriceDialog = new GetPriceDialog(this);
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
            }
        });

        manager = new LinearLayoutManager(this);
        recyclerview.setLayoutManager(manager);
        mList = new ArrayList<String>();
        mAdapter = new MyWalletAdapter(this, mList);
        recyclerview.setAdapter(mAdapter);
    }

    @Event(value = {R.id.tv_tixian, R.id.tv_chongzhi,R.id.tv_type,R.id.tv_time})
    private void getE(View v) {
        switch (v.getId()) {
            case R.id.tv_tixian:
                getBankInfo(2);
                break;
            case R.id.tv_chongzhi:
                getBankInfo(1);
                break;
            case R.id.tv_type:
                showType();
                break;
            case R.id.tv_time:
                showTime();
                break;
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        mList.add("1");
        mList.add("1");
        mList.add("1");
        mList.add("1");
        mList.add("1");
        mList.add("1");
        mList.add("1");
        mAdapter.notifyDataSetChanged();
    }

    /**
     * 获取绑定银行卡信息
     */
    private void getBankInfo(final int type) {
        ArrayList<String> list = new ArrayList<String>();
        list.add(SessionManager.getInstance().getUser().getFdriverid());
        XUtil.Post(BaseURL.BANKINFO, list, SessionManager.getInstance().getUser().getWebtoken(), new MyCallBack<BankInfoBean>() {
            @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
            @Override
            public void onSuccess(BankInfoBean result) {
                super.onSuccess(result);
                if (result.isSuccess() && result.getObj() != null) {
                    Chongzhi(result.getObj(), type);
                } else {
                    startActivity(new Intent(MyWalletActivity.this, BindingBankCarkActivity.class));
                }
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                super.onError(ex, isOnCallback);
                Log.d("错误了", ex + "");
            }
        });
    }

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    private void Chongzhi(final BankInfoEntity entity, final int type) {
        int size = entity.getFbankCard().length();
        final String str = entity.getFbankCard().substring(size - 4, size);
        chongzhidialog.setCanceledTouchOutside(true);
        chongzhidialog.setBancname(entity.getZbankSname() + "(" + str + ")");
        chongzhidialog.setTitle(type == 1 ? getString(R.string.chongzhi) : getString(R.string.tixian));
        chongzhidialog.setMsg(type == 1 ? getString(R.string.chongzhijine) : getString(R.string.tixianjine));
        chongzhidialog.setCommitCallBack(type == 1 ? getString(R.string.chongzhi) : getString(R.string.xiayibu), new RechargeDialog.CommitCallBack() {
            @Override
            public void onCommit(double price) {
                if (type == 1) {
                    Paymentdues(price, entity.getFbankCard());
                } else {
                    //提现验证码发送
                    costMsg(price,str,entity.getZbankSname());
                }
            }
        });
        chongzhidialog.create();
        chongzhidialog.showDialog();
    }

    //充值
    private void Paymentdues(double price, String acctId) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("memId", SessionManager.getInstance().getUser().getFdriverid());
//        map.put("memId",123);
        map.put("acctId", acctId);
//        map.put("acctId",10101);
        map.put("tranAmount", price);
        dialog.showDialog();
        XUtil.PostJsonObj(BaseURL.PAYMENTDUES, map, SessionManager.getInstance().getUser().getWebtoken(), new MyCallBack<BaseBean>() {
            @Override
            public void onSuccess(BaseBean result) {
                super.onSuccess(result);
                dialog.dissDialog();
                if (result.isSuccess()) {
                    if (chongzhidialog.isShowing()) {
                        chongzhidialog.dissDialog();
                    }
                    UHelper.showToast(MyWalletActivity.this, getString(R.string.chongzhi_success));
                } else {
                    UHelper.showToast(MyWalletActivity.this, getString(R.string.chongzhi_fail));
                }
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                super.onError(ex, isOnCallback);
                dialog.dissDialog();
            }
        });
    }

    private void costMoney(double price,String code,String bankname) {
        final Map<String, Object> map = new HashMap<String, Object>();
        map.put("memId", SessionManager.getInstance().getUser().getFdriverid());
        map.put("tranAmount",price);
        map.put("messageCode", code);
        map.put("serialNo", SerialNo);
        map.put("zBankSname", bankname);
        dialog.showDialog();
        XUtil.PostJsonObj(BaseURL.CASHMONEY, map, SessionManager.getInstance().getUser().getWebtoken(), new MyCallBack<BankCallBackBean>() {
            @Override
            public void onSuccess(BankCallBackBean result) {
                super.onSuccess(result);
                dialog.dissDialog();
                if (result.isSuccess()) {
                    chongzhidialog.dissDialog();
                    getPriceDialog.dissDialog();
                    UHelper.showToast(MyWalletActivity.this, getString(R.string.tixian_cuccess));
                } else {
                    UHelper.showToast(MyWalletActivity.this, getString(R.string.tixian_fail));
                }
            }
            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                super.onError(ex, isOnCallback);
                dialog.dissDialog();
            }
        });
    }

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    private void tixian(final double price, final String banknum, final String bankname) {
        getPriceDialog.setMsg("已向尾号(" + banknum + ")的银行卡预留手机号发送验证码，请在下方输入验证码");
        getPriceDialog.setCanceledTouchOutside(true);
        getPriceDialog.setAuthCallBack(new GetPriceDialog.AuthCallBack() {
            @Override
            public void onAuth() {
                costMsg(price,banknum,bankname);
            }
        });
        getPriceDialog.setCommitCallBack(new GetPriceDialog.CommitCallBack() {
            @Override
            public void onCommit(String auth) {
                costMoney(price,auth,bankname);
            }
        });
        getPriceDialog.create();
        getPriceDialog.showDialog();
    }

    //MSG_DYNAMICCODE
    private void costMsg(final double price, final String backnum, final String backName) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("memId", SessionManager.getInstance().getUser().getFdriverid());
        map.put("tranType", 1);
        map.put("tranAmount", price);
        dialog.showDialog();
        XUtil.PostJsonObj(BaseURL.MSG_DYNAMICCODE, map, SessionManager.getInstance().getUser().getWebtoken(), new MyCallBack<BankCallBackBean>() {
            @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
            @Override
            public void onSuccess(BankCallBackBean result) {
                super.onSuccess(result);
                dialog.dissDialog();
                if (result.isSuccess()) {
                    getPriceDialog.setDownTime();
                    SerialNo=result.getObj().getSerialNo();
                    tixian(price,backnum,backName);
                }
            }
            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                super.onError(ex, isOnCallback);
                dialog.dissDialog();
            }
        });
    }

    /**
     * 打开选择类型
     */
    private void showType(){

        Resources res =getResources();
        String[] transaction=res.getStringArray(R.array.transaction_type);
        final ArrayList<String> list=new ArrayList<String>();
        for (String str:transaction){
            list.add(str);
        }
        final OptionsPickerView pvOptions = new  OptionsPickerView.Builder(this, new OptionsPickerView.OnOptionsSelectListener() {
            @Override
            public void onOptionsSelect(int options1, int option2, int options3 ,View v) {
                //返回的分别是三个级别的选中位置
                tv_type.setText(list.get(options1));
            }
        }).build();
        pvOptions.setPicker(list);
        pvOptions.show();
    }

    private void showTime(){

        Resources res =getResources();
        String[] transaction=res.getStringArray(R.array.transaction_time);
        final ArrayList<String> list=new ArrayList<String>();
        for (String str:transaction){
            list.add(str);
        }
        final OptionsPickerView pvOptions = new  OptionsPickerView.Builder(this, new OptionsPickerView.OnOptionsSelectListener() {
            @Override
            public void onOptionsSelect(int options1, int option2, int options3 ,View v) {
                //返回的分别是三个级别的选中位置
                tv_time.setText(list.get(options1));
            }
        }).build();
        pvOptions.setPicker(list);
        pvOptions.show();
    }
}
