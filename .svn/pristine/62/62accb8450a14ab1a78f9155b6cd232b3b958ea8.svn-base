package com.babuwyt.consignor.ui.activity;

import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.view.GravityCompat;
import android.support.v4.view.ViewPager;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.babuwyt.consignor.R;
import com.babuwyt.consignor.adapter.InfoAuthAdapter;
import com.babuwyt.consignor.base.BaseActivity;
import com.babuwyt.consignor.base.ClientApp;
import com.babuwyt.consignor.base.SessionManager;
import com.babuwyt.consignor.bean.Sign;
import com.babuwyt.consignor.entity.SignEntity;
import com.babuwyt.consignor.entity.UserInfoEntity;
import com.babuwyt.consignor.finals.BaseURL;
import com.babuwyt.consignor.finals.Constant;
import com.babuwyt.consignor.finals.SharePrefKeys;
import com.babuwyt.consignor.ui.fragment.CompanyInfoAuthFragment;
import com.babuwyt.consignor.ui.fragment.UserInfoAuthFragment;
import com.babuwyt.jonylibrary.bean.BaseBean;
import com.babuwyt.jonylibrary.inteface.MyCallBack;
import com.babuwyt.jonylibrary.util.SharePreferencesUtils;
import com.babuwyt.jonylibrary.util.UHelper;
import com.babuwyt.jonylibrary.util.XUtil;
import com.babuwyt.jonylibrary.views.CustomViewPager;
import com.google.gson.Gson;

import org.xutils.view.annotation.ContentView;
import org.xutils.view.annotation.Event;
import org.xutils.view.annotation.ViewInject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by lenovo on 2017/9/5.
 * 信息认证
 */
@ContentView(R.layout.activity_userinfoauth)
public class InfoAuthActivity extends BaseActivity {
    @ViewInject(R.id.toolbar)
    Toolbar toolbar;
    @ViewInject(R.id.tv_mt)
    TextView tv_mt;
    @ViewInject(R.id.viewpager)
    CustomViewPager viewpager;
    private InfoAuthAdapter mAdapter;
    private CompanyInfoAuthFragment companyInfoAuthFragment;
    private UserInfoAuthFragment userInfoAuthFragment;
    private ArrayList<Fragment> mList;

    private int Limit=0;//默认加载的是第一个界面
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        init();
    }

    private void init() {
        toolbar.setTitle(getString(R.string.gerenxinxi));
        toolbar.setNavigationIcon(R.drawable.goback_black);
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                actionBack();
            }
        });
        mList=new ArrayList<Fragment>();
        companyInfoAuthFragment=new CompanyInfoAuthFragment();
        userInfoAuthFragment=new UserInfoAuthFragment();
        mList.add(userInfoAuthFragment);
        mList.add(companyInfoAuthFragment);
        mAdapter=new InfoAuthAdapter(getSupportFragmentManager(),getApplication(),mList);
        viewpager.setAdapter(mAdapter);
        viewpager.setOffscreenPageLimit(2);

    }

    @Event(value = {R.id.tv_mt})
    private void getE(View v){
        switch (v.getId()){
            case R.id.tv_mt:
                actionMakeTrue();
                break;
        }
    }

    private void setLimit(){
        if (Limit==0){
            toolbar.setTitle(getString(R.string.gerenxinxi));
            tv_mt.setText(getString(R.string.next_down));
        }else {
            toolbar.setTitle(getString(R.string.companyinfo));
            tv_mt.setText(getString(R.string.maketrue));
        }
    }
    //返回按钮和返回按键操作
    private void actionBack(){
        if (Limit==1){
            viewpager.setCurrentItem(0);
            Limit=0;
            setLimit();
        }else {
            finish();
        }
    }
    //确定按钮
    private void actionMakeTrue(){
        if (Limit==0){
            Limit=1;
            viewpager.setCurrentItem(1);
        }else {
            getEntity();
        }
        setLimit();
    }

    private void getEntity(){
        UserInfoEntity entity=new UserInfoEntity();
        //获取个人填写的信息
        UserInfoEntity entity1=userInfoAuthFragment.getData();
        entity.setUserName(entity1.getUserName());
        entity.setUserPhone(entity1.getUserPhone());
        entity.setIdCard(entity1.getIdCard());
        entity.setCardImg(entity1.getCardImg());
        //获取公司填写的信息
        UserInfoEntity entity2 =companyInfoAuthFragment.getCompanyData();
        entity.setCompanyName(entity2.getCompanyName());
        entity.setCompanyCode(entity2.getCompanyCode());
        entity.setCompanyPerson(entity2.getCompanyPerson());
        entity.setLicenseImg(entity2.getLicenseImg());

        Log.d("==获取的信息==",new Gson().toJson(entity));
        getHttp(entity);

    }
    private void getHttp(UserInfoEntity entity){
        Map<String,String> map=new HashMap<String, String>();
        map.put("token",SessionManager.getInstance().getUser().getToken());
        map.put("userId",SessionManager.getInstance().getUser().getUserId());
        map.put("userName",entity.getUserName());
        map.put("idCard",entity.getIdCard());
        map.put("userPhone",entity.getUserPhone());
        map.put("cardImg",entity.getCardImg());
        map.put("companyName",entity.getCompanyName());
        map.put("companyCode",entity.getCompanyCode());
        map.put("companyPerson",entity.getCompanyPerson());
        map.put("licenseImg",entity.getLicenseImg());

        XUtil.PostJson(BaseURL.INFOAUTHENTICATION, map, new MyCallBack<BaseBean>() {
            @Override
            public void onSuccess(BaseBean result) {
                super.onSuccess(result);
                if (result.isSuccess()){
                    UserInfoEntity userInfoEntity=SessionManager.getInstance().getUser();
                    userInfoEntity.setIsAuth(2);
                    ((ClientApp)getApplication()).saveLoginUser(userInfoEntity);
                    finish();
                }
                UHelper.showToast(InfoAuthActivity.this,result.getMsg());
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                super.onError(ex, isOnCallback);
                Log.d("发生错误啦",""+ex);
            }
        });

    }







    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            actionBack();
        }
        return false;
    }






}
