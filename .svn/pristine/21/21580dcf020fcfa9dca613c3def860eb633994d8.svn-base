package com.babuwyt.siji.ui.activity;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.View;

import com.babuwyt.jonylibrary.inteface.MyCallBack;
import com.babuwyt.jonylibrary.util.UHelper;
import com.babuwyt.jonylibrary.util.XUtil;
import com.babuwyt.jonylibrary.views.RecycleViewDivider;
import com.babuwyt.siji.R;
import com.babuwyt.siji.adapter.GrabOrderListAdapter;
import com.babuwyt.siji.base.BaseActivity;
import com.babuwyt.siji.base.SessionManager;
import com.babuwyt.siji.bean.GrabOrderBean;
import com.babuwyt.siji.entity.GrabOrderItemEntity;
import com.babuwyt.siji.finals.BaseURL;

import org.xutils.view.annotation.ContentView;
import org.xutils.view.annotation.ViewInject;

import java.util.ArrayList;

/**
 * Created by lenovo on 2017/9/25.
 * 抢单大厅
 */
@ContentView(R.layout.activity_graborder)
public class GrabOrderListActivity extends BaseActivity implements GrabOrderListAdapter.CallPhoneListener{
    private static final int MY_PERMISSIONS_REQUEST_CALL_PHONE = 1;
    @ViewInject(R.id.recyclerview)
    RecyclerView recyclerview;
    @ViewInject(R.id.toolbar)
    Toolbar toolbar;

    private RecyclerView.LayoutManager manager;
    private GrabOrderListAdapter mAdapter;
    private ArrayList<GrabOrderItemEntity> mList;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        init();
        getOrderList();
    }

    private void init() {
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
            }
        });
        manager = new LinearLayoutManager(this);
        recyclerview.setLayoutManager(manager);
        recyclerview.addItemDecoration(new RecycleViewDivider(
                this, LinearLayoutManager.HORIZONTAL, 20, getResources().getColor(R.color.main_gray_line)));
        mList = new ArrayList<GrabOrderItemEntity>();
        mAdapter = new GrabOrderListAdapter(this, mList);
        recyclerview.setAdapter(mAdapter);
        mAdapter.setListener(this);
    }

    private void getOrderList() {
        ArrayList<String> list = new ArrayList<String>();
        list.add(1 + "");
        dialog.showDialog();
        XUtil.GetPing(BaseURL.SELECTOBORDER, list, SessionManager.getInstance().getUser().getWebtoken(), new MyCallBack<GrabOrderBean>() {
            @Override
            public void onSuccess(GrabOrderBean result) {
                super.onSuccess(result);
                dialog.dissDialog();
                if (result.isSuccess()) {
                    mList.clear();
                    mList.addAll(result.getItems());
                    mAdapter.notifyDataSetChanged();
                }
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                super.onError(ex, isOnCallback);
                dialog.dissDialog();
            }
        });
    }

    public void testCall() {
        if (ContextCompat.checkSelfPermission(this,
                Manifest.permission.CALL_PHONE)
                != PackageManager.PERMISSION_GRANTED) {

            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.CALL_PHONE},
                    MY_PERMISSIONS_REQUEST_CALL_PHONE);
        } else {
            callPhone();
        }
    }

    @SuppressLint("MissingPermission")
    public void callPhone() {
        Intent intent = new Intent(Intent.ACTION_CALL);
        Uri data = Uri.parse("tel:" + "10086");
        intent.setData(data);
        startActivity(intent);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {

        if (requestCode == MY_PERMISSIONS_REQUEST_CALL_PHONE) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                callPhone();
            } else {
                UHelper.showToast(this,"没有授权拨打电话");
            }
            return;
        }
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }
    @Override
    public void onListener(int position) {
        testCall();
    }
}
