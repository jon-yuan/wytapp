package com.babuwyt.consignor.ui.fragment;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.widget.ExpandableListView;
import android.widget.TextView;

import com.babuwyt.consignor.R;
import com.babuwyt.consignor.adapter.ReleaseOrderAdapter;
import com.babuwyt.consignor.base.BaseFragment;
import com.babuwyt.consignor.base.SessionManager;
import com.babuwyt.consignor.bean.OrderListBean;
import com.babuwyt.consignor.entity.OrderEntity;
import com.babuwyt.consignor.finals.BaseURL;
import com.babuwyt.consignor.finals.DataSynEvent;
import com.babuwyt.consignor.ui.activity.AddOrderActivity;
import com.babuwyt.consignor.ui.activity.OrderDetailsActivity;
import com.babuwyt.jonylibrary.bean.BaseBean;
import com.babuwyt.jonylibrary.inteface.MyCallBack;
import com.babuwyt.jonylibrary.util.UHelper;
import com.babuwyt.jonylibrary.util.XUtil;
import com.babuwyt.jonylibrary.views.dialog.PromptDialog;
import com.liaoinstan.springview.container.DefaultFooter;
import com.liaoinstan.springview.container.DefaultHeader;
import com.liaoinstan.springview.widget.SpringView;

import org.xutils.view.annotation.ContentView;
import org.xutils.view.annotation.Event;
import org.xutils.view.annotation.ViewInject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import de.greenrobot.event.EventBus;

/**
 * Created by lenovo on 2017/9/10.
 */
@ContentView(R.layout.fragment_releaseorder)
public class ReleaseOrderFragment extends BaseFragment{
    @ViewInject(R.id.toolbar)
    Toolbar toolbar;
    @ViewInject(R.id.exlistview)
    ExpandableListView exlistview;
    @ViewInject(R.id.tv_addorder)
    TextView tv_addorder;
    @ViewInject(R.id.springview)
    SpringView springview;
    private ReleaseOrderAdapter mAdapter;
    private ArrayList<ArrayList<OrderEntity>> mList;
    private int type;
    private Intent intent;
    private int pageNum=1;
    private ArrayList<OrderEntity> orderEntities = new ArrayList<OrderEntity>();
    private ArrayList<OrderEntity> orderEntities1 = new ArrayList<OrderEntity>();
    private ArrayList<OrderEntity> orderEntities2 = new ArrayList<OrderEntity>();
    private ArrayList<OrderEntity> orderEntities3 = new ArrayList<OrderEntity>();

    public static ReleaseOrderFragment newInstance(int type) {
        ReleaseOrderFragment fragment = new ReleaseOrderFragment();
        Bundle args = new Bundle();
        args.putInt("type", type);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            type = getArguments().getInt("type");
        }
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        init();
        initRefresh();
        getOrder(1);
    }
    private void init() {
        intent = new Intent();
        toolbar.setVisibility(type);
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                DataSynEvent event = new DataSynEvent();
                event.setType(event.DRAWER_LAYOUT_OPEN);
                EventBus.getDefault().post(event);
            }
        });
        mList = new ArrayList<ArrayList<OrderEntity>>();
        mAdapter = new ReleaseOrderAdapter(getActivity());
//
        mList.add(orderEntities1);
        mList.add(orderEntities2);
        mList.add(orderEntities3);
        mAdapter.setMap(mList);
        exlistview.setAdapter(mAdapter);

        for (int i = 0; i < mList.size(); i++) {
            exlistview.expandGroup(i);
        }
        mAdapter.setCallBack(new ReleaseOrderAdapter.CallBack() {
            @SuppressLint("NewApi")
            @Override
            public void delete(final int groupPosition, final int childPosition) {
                PromptDialog dialog=new PromptDialog(getActivity());
                dialog.setImg(R.drawable.icon_delete_order);
                dialog.setMsg(getString(R.string.del_order));
                dialog.setOnClick1(getString(R.string.cancal), new PromptDialog.Btn1OnClick() {
                    @Override
                    public void onClick() {

                    }
                });
                dialog.setOnClick2(getString(R.string.maketrue), new PromptDialog.Btn2OnClick() {
                    @Override
                    public void onClick() {
                        delOrder(groupPosition,childPosition);
                    }
                });
                dialog.create();
                dialog.showDialog();
            }

            @Override
            public void xiugai(int groupPosition, int childPosition) {
                        intent.setClass(getActivity(), AddOrderActivity.class);
                        intent.putExtra("orderId",mList.get(groupPosition).get(childPosition).getOrderId());
                        intent.putExtra("type","edit");
                        startActivity(intent);
            }

            @SuppressLint("NewApi")
            @Override
            public void fabu(final int groupPosition, final int childPosition) {
                PromptDialog dialog=new PromptDialog(getActivity());
                dialog.setImg(R.drawable.icon_fabu_order);
                dialog.setMsg(getString(R.string.rel_order));
                dialog.setOnClick1(getString(R.string.cancal), new PromptDialog.Btn1OnClick() {
                    @Override
                    public void onClick() {

                    }
                });
                dialog.setOnClick2(getString(R.string.maketrue), new PromptDialog.Btn2OnClick() {
                    @Override
                    public void onClick() {
                        relOrder(groupPosition,childPosition);
                    }
                });
                dialog.create();
                dialog.showDialog();
            }
        });
        exlistview.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
            @Override
            public boolean onChildClick(ExpandableListView expandableListView, View view, int i, int i1, long l) {
                        intent.setClass(getActivity(), OrderDetailsActivity.class);
                        intent.putExtra("orderId",mList.get(i).get(i1).getOrderId());
                        startActivity(intent);
                return false;
            }
        });

    }

    private void initRefresh(){
        springview.setType(SpringView.Type.FOLLOW);
        springview.setHeader(new DefaultHeader(getActivity(),R.drawable.pullrefresh_progressbar,R.drawable.icon_arrow_down));
        springview.setFooter(new DefaultFooter(getActivity()));
        springview.setListener(new SpringView.OnFreshListener() {
            @Override
            public void onRefresh() {
                pageNum=1;
                getOrder(1);
            }

            @Override
            public void onLoadmore() {
                pageNum++;
                getOrder(2);
            }
        });
    }

    @Event(value = {R.id.tv_addorder})
    private void getE(View v) {
        switch (v.getId()) {
            case R.id.tv_addorder:
                intent.setClass(getActivity(), AddOrderActivity.class);
                intent.putExtra("type","add");
                startActivity(intent);
                break;
        }
    }

    /**
     * 获取订单
     * type 1 刷新  2 加载更多
     */
    private void getOrder(final int type) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("userId", SessionManager.getInstance().getUser().getUserId());
        map.put("type", 0);
        map.put("pageNum", pageNum);
        XUtil.PostJsonObj(BaseURL.GETORDERLIST, map, new MyCallBack<OrderListBean>() {
            @Override
            public void onSuccess(OrderListBean result) {
                super.onSuccess(result);

                if (result.isSuccess() && result.getObj()!=null && result.getObj().size()>0) {
                    ArrayList<OrderEntity> list = result.getObj();
                    if (type==1){
                        //刷新
                        orderEntities.clear();
                        orderEntities = list;
                        Fen(1);
                    }else {
                        orderEntities.addAll(list);
                        Fen(2);
                    }
                }else {
                        UHelper.showToast(getActivity(), result.getMsg());
                }
                springview.onFinishFreshAndLoad();
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                super.onError(ex, isOnCallback);
                springview.onFinishFreshAndLoad();
            }
        });
    }
    //分单
    private void Fen(int type) {
        if (type==1){
            orderEntities1.clear();
            orderEntities2.clear();
            orderEntities3.clear();
        }
        if (orderEntities != null && orderEntities.size() > 0) {
            for (OrderEntity orderEntity : orderEntities) {
                switch (orderEntity.getType()) {
                    case 1:
                        orderEntities1.add(orderEntity);
                        break;
                    case 2:
                        orderEntities2.add(orderEntity);
                        break;
                    case 4:
                        orderEntities3.add(orderEntity);
                        break;
                }
            }
            mAdapter.notifyDataSetChanged();
        }
    }


    //删除订单

    private void delOrder(final int groupPosition, final int childPosition){
        final OrderEntity orderEntity=mList.get(groupPosition).get(childPosition);
        final Map<String, Object> map = new HashMap<String, Object>();
        map.put("userId", SessionManager.getInstance().getUser().getUserId());
        map.put("token", SessionManager.getInstance().getUser().getToken());
        map.put("orderId", orderEntity.getOrderId());
        XUtil.PostJsonObj(BaseURL.DELORDER, map, new MyCallBack<BaseBean>() {
            @Override
            public void onSuccess(BaseBean result) {
                super.onSuccess(result);
                if (result.isSuccess()) {
                    mList.get(groupPosition).remove(orderEntity);
                    mAdapter.notifyDataSetChanged();
                    UHelper.showToast(getActivity(), getString(R.string.del_order_success));
                }else {
                    UHelper.showToast(getActivity(), getString(R.string.del_order_fail));
                }

            }
            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                super.onError(ex, isOnCallback);
            }
        });
    }

    /**
     * 发布订单
     * @param groupPosition
     * @param childPosition
     */
    private void relOrder(final int groupPosition, final int childPosition){
        final OrderEntity orderEntity=mList.get(groupPosition).get(childPosition);
        final Map<String, Object> map = new HashMap<String, Object>();
        map.put("userId", SessionManager.getInstance().getUser().getUserId());
        map.put("token", SessionManager.getInstance().getUser().getToken());
        map.put("orderId", orderEntity.getOrderId());
        XUtil.PostJsonObj(BaseURL.RELORDER, map, new MyCallBack<BaseBean>() {
            @Override
            public void onSuccess(BaseBean result) {
                super.onSuccess(result);
                if (result.isSuccess()) {
                    mList.get(groupPosition).remove(orderEntity);
                    mList.get(1).add(orderEntity);
                    mAdapter.notifyDataSetChanged();
                    UHelper.showToast(getActivity(), getString(R.string.rel_order_success));
                }else {
                    UHelper.showToast(getActivity(), getString(R.string.rel_order_fail));
                }
            }
            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                super.onError(ex, isOnCallback);
            }
        });
    }
}
